# -*- coding: utf-8 -*-
"""CreditModel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16l17suUwQFLvuSVmYoujBX1_vh_smYKW
"""

#importer les packages
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
import pickle

#lire la base. 
df=pd.read_csv('/content/train_u6lujuX_CVtuZ9i.csv')
df



pd.set_option('display.max_rows',df.shape[0]+1)

df

pd.set_option('display.max_rows',10)

df

df.info()

df.isnull().sum().sort_values(ascending=False)

df.describe()

#renseigner les valeurs manquantes 
cat_data=[]
num_data=[]
for i,c in enumerate(df.dtypes):
  if c==object:
    cat_data.append(df.iloc[:,i])
  else:
    num_data.append(df.iloc[:,i])
num_data=pd.DataFrame(num_data).transpose()
cat_data=pd.DataFrame(cat_data).transpose()

#pour les valeurs categoriques on va remplacer les valeurs manquantes par les valeurs les plus frequentes 
cat_data=cat_data.apply(lambda x:x.fillna(x.value_counts().index[0]))
cat_data.isnull().sum().any()

#pour les variab;es nmariques on va remplacer les valeurs manquantes par la valeur de la ligne precedentes de meme colonne
num_data.fillna(method='bfill',inplace=True)
num_data.isnull().sum().any()

#transformer la colonne target 
target_value={'Y':1,'N':0}
target=cat_data['Loan_Status']
cat_data.drop('Loan_Status',axis=1,inplace=True)
target=target.map(target_value)
target

cat_data

#remplacer les valeurs categoriques par des valeurs numeriques 
le=LabelEncoder()
for i in cat_data:
  cat_data[i]=le.fit_transform(cat_data[i])
cat_data

cat_data

#supprimer loan id
cat_data.drop('Loan_ID',axis=1,inplace=True)

#concatener num_data et cat_data 
x=pd.concat([cat_data,num_data],axis=1)
y=target

x

y

#va commencer par la variable target
target.value_counts()

plt.figure(figsize=(8,6))
sns.countplot(target)
yes=target.value_counts()[0]/len(target)
no=target.value_counts()[1]/len(target)
print(f'le pourcentage des credits accordes est :{yes}')
print(f'le pourcentage des credits accordes est : {no}')

#credit history 
grid=sns.FacetGrid(df,col='Loan_Status',size=3.2,aspect=1.6)
grid.map(sns.countplot,'Credit_History')

df

#la base de donnees again
df=pd.concat([cat_data,num_data,target],axis=1)

#gender 
grid=sns.FacetGrid(df,col='Loan_Status',size=3.2,aspect=1.6)
grid.map(sns.countplot,'Education')

#education
grid=sns.FacetGrid(df,col='Loan_Status',size=3.2,aspect=1.6)
grid.map(sns.countplot,'Gender')